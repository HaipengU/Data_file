W_cs <- scale(W)
Gmatrix <- tcrossprod(W_cs) / ncol(W_cs)
}
# Already imputed (No na), ONLY QC : Ags: Wmatrix, Method=2, maf=0.05
else if (Method == 2) {
p1 <- colMeans(Wmatrix)/2
maf2 <- pmin(p1, 1 - p1)
index <- which(maf2 < maf)
W <- Wmatrix[, -index]
W_cs <- scale(W)
Gmatrix <- tcrossprod(W_cs) / ncol(W_cs)
}
# Output W_impute matrix : Ags: Wmatrix, Method=3, maf=0.05
else if (Method==3) {
p1 <- (colMeans(Wmatrix, na.rm = T) / 2)
for (j in 1:ncol(Wmatrix)){
Wmatrix[, j] <- ifelse(is.na(Wmatrix[, j]), rbinom(1,2,p1[j]), Wmatrix[, j])
}
# remove snp with less than 0.05 MAF
p2 <- colMeans(Wmatrix) / 2
maf2 <- pmin(p2,1 - p2)
maf.index <- which(maf2 < maf)
Wmatrix <- Wmatrix[, -maf.index]
Gmatrix <- Wmatrix # this is a tricky here for output (Gmatrix is actually Wmatrix)
}
# Already imputed, QC; Only compute G2, Ags: Wmatrix
else {
Wcs <- scale(Wmatrix, center = TRUE, scale = TRUE)
Gmatrix <- tcrossprod(Wcs)/ncol(Wcs)
}
return(Gmatrix)
}
#-------------------
# cor plot function
#-------------------
corfunc<- function(cor_coef,title){
M<- diag(1,6,6)
M[upper.tri(M,diag = F)]<- M[lower.tri(M,diag = F)]<- cor_coef
colnames(M)<- rownames(M)<- c("Flt","Mrp","Yid",'Grm', "Iss","Msr")
library(corrplot)
col3<- colorRampPalette(c("red","white","blue"))
corrplot(M, method="circle", type = "upper",addCoef.col="black",diag = F,
tl.col = "black", tl.cex = 1.2,number.cex=1, order="original",
cl.lim=c(-1, 1), cl.offset = 0.3,
col = col3(50),number.digits=2, mar=c(0,1,1,1))
mtext(title, cex=1)
}
hist_graph <- function (df_all, trait, labels) {
library (ggplot2)
ggplot (df_all, aes(trait)) +
geom_histogram (aes(y = ..density..), colour = "black", fill = "white",
bins = 10) +
geom_density (alpha = .2, fill = "#FF6666") +
labs (x = labels) + theme(axis.text=element_text(size = 8),
axis.title = element_text(size = 10))
}
check_boot <- function(boot, Strength_Thres, Direction_Thres) {
boot[(boot$strength >= Strength_Thres) & (boot$direction > Direction_Thres),]
}
CFAdata_combined <- read.csv("~/Dropbox/VT/Project/Rice_BN/dataset/CFAdata_combined.csv", na= "NA", stringsAsFactors = FALSE, row.names = 1)
CFAdata_combined <- read.csv("~/Dropbox/VT/Project/Plant/Rice_BN/dataset/CFAdata_combined.csv", na= "NA", stringsAsFactors = FALSE, row.names = 1)
dim(CFAdata_combined)
rm(list = ls())
setwd('~/Dropbox/GitHub/Data_file/Arabidopsis_data/')
library(psych)
library(gplots)
library(corrplot)
library(gplots)
pheno1 <- read.table("download", header = T)
pheno2 <- read.table("download1", header = T)
pheno3 <- read.table("download2", header = T)
pheno4 <- read.table("download3", header = T)
pheno5 <- read.table("download4", header = T)
pheno6 <- read.table("download5", header = T)
pheno7 <- read.table("download6", header = T)
pheno8 <- read.table("download7", header = T)
pheno9 <- read.table("download8", header = T)
pheno10 <- read.table("download9", header = T)
pheno11 <- read.table("download10", header = T)
pheno12 <- read.table("download11", header = T)
pheno13 <- read.table("download12", header = T)
pheno14 <- read.table("download13", header = T)
pheno15 <- read.table("download14", header = T)
pheno16 <- read.table("download15", header = T)
pheno17 <- read.table("download16", header = T)
pheno18 <- read.table("download17", header = T)
pheno19 <- read.table("download18", header = T)
pheno20 <- read.table("download19", header = T)
pheno21 <- read.table("download20", header = T)
df1 <- pheno1[1:10,]
df2 <- pheno2[1:10,]
df2 <- do.call("cbind", mget(paste('pheno',1:21,sep = '')))
dim(df2)
df2 <- df2[,-c(19:21)]
df3 <- df2[,seq(3,60,3)]
colnames(df3) <- gsub('pheno\\d+.','',colnames(df3))
dim(df3)
COR <- cor(df, use = "complete.obs") # seperate DS
df <- df3
COR <- cor(df, use = "complete.obs") # seperate DS
KM <- KMO(COR) # 0.889\0.916
str(KM)
corrplot(COR, is.corr = FALSE, method ="circle", type = "upper",
diag = F, number.cex = 0.75, col = cm.colors(30),
number.digits = 2, addCoef.col = "black", tl.col = "black",
tl.srt = 90, tl.cex = 1, cl.lim = c(-1, 1))
heatmap(COR)
colnames(df3)
grep('MPH', colnames(df3))
dft <- df[,-c(2  ,6  ,7  ,8  ,9 ,10 ,13 ,14 ,18 ,19)]
dim(dft)
fa.parallel(dft,n.obs=123, fa="fa",
n.iter=100,error.bars=T,
se.bars=TRUE,ylabel=NULL, show.legend = F,
fm = 'mle')
fit.mle <- fa(dft,
nfactors = 3,
fm="ml",
max.iter = 1000,
rotate = "varimax")
Load = fit.mle$loadings
Load
heatmap(COR)
colnames(df3)
dft <- df[,-c(5,8,10,15)]
COR <- cor(dft, use = "complete.obs") # seperate DS
KM <- KMO(COR) # 0.889\0.916
str(KM)
corrplot(COR, is.corr = FALSE, method ="circle", type = "upper",
diag = F, number.cex = 0.75, col = cm.colors(30),
number.digits = 2, addCoef.col = "black", tl.col = "black",
tl.srt = 90, tl.cex = 1, cl.lim = c(-1, 1))
corrplot(COR, is.corr = FALSE, method ="circle", type = "upper",
diag = F, number.cex = 0.75, col = cm.colors(30),
number.digits = 2, addCoef.col = "black", tl.col = "black",
tl.srt = 90, tl.cex = 1, cl.lim = c(-1, 1))
heatmap(COR)
fa.parallel(dft,n.obs=123, fa="fa",
n.iter=100,error.bars=T,
se.bars=TRUE,ylabel=NULL, show.legend = F,
fm = 'mle')
fa.parallel(COR,n.obs=123, fa="fa",
n.iter=100,error.bars=T,
se.bars=TRUE,ylabel=NULL, show.legend = F,
fm = 'mle')
fit.mle <- fa(dft,
nfactors = 4,
fm="ml",
max.iter = 1000,
rotate = "varimax")
Load = fit.mle$loadings
Load
CFAdata_combined <- read.csv("~/Dropbox/VT/Project/Plant/Rice_BN/dataset/CFAdata_combined.csv", na= "NA", stringsAsFactors = FALSE, row.names = 1)
dim(CFAdata_combined)
colnames(CFAdata_combined)
COR <- cor(CFAdata_combined, use = "complete.obs") # seperate DS
KM <- KMO(COR) # 0.889\0.916
str(KM)
fa.parallel(COR,n.obs=123, fa="fa",
n.iter=100,error.bars=T,
se.bars=TRUE,ylabel=NULL, show.legend = F,
fm = 'mle')
fa.parallel(COR,n.obs=123, fa="fa",
n.iter=100,error.bars=T,
se.bars=TRUE,ylabel=NULL, show.legend = F,
fm = 'mle')
colnames(CFAdata_combined)
nlist<- c('Fla', 'Flf', 'Flb', 'Flaa', 'Flfa', 'Cuh', 'Fll', 'Flw', 'Pnu', 'Plh',
'Pal', 'Ppn','Snpp','Flpp','Paf', 'Sl','Sw', 'Sv', 'Ssa', 'Bsl', 'Bsw', 'Bsa',
'Bvl', 'Slwr', 'Blwr', 'Amc', 'Asv', 'Pct', 'Fla7', 'Fla6', 'Trf', 'Glmc',
'Kslm', 'Nasl', 'Kssl', 'Krlm', 'Narl', 'Krsl', 'Sbcl', 'Sbsl', 'Sbr',
'Rbcl', 'Rbsl', 'Rbr', 'Tnsc', 'Tbcc', 'Tbrc', 'Hlsc', 'Hlcc', 'Hlrc',
'Hfsc', 'Hfcc', 'Hfrc')
length(nlist)
knitr::opts_chunk$set(echo = TRUE)
getwd()
knitr::opts_chunk$set(echo = TRUE)
getwd()
knitr::opts_chunk$set(echo = TRUE)
df <- read.table('~/Dropbox/VT/Class/Fall_2019/Intro_To_Genomic_Data_Science/Dataset/TAIR10_Transposable_Elements.txt', header = T)
dim(df)
head(df)
apply(df2, 2, summary)
apply(df, 2, summary)
head(df)
summary(c(1:100))
df$Chromosome <- gsub('TE.+', '',df$Transposon_Name)
head(df$Chromosome)
head(df)
df$Chromosome <- gsub('AT', 'Chr', gsub('TE.+', '',df$Transposon_Name))
head(df)
table(df$Chromosome)
df$te_size <- df$Transposon_max_End - df$Transposon_min_Start
head(df$te_size)
hist(df$te_size)
boxplot(df$te_size)
hist(df$te_size)
table(df$te_size)
hist(df$te_size)
table(df$Transposon_Super_Family)
length(unique(df$Transposon_Super_Family))
str(unique(df$Transposon_Super_Family))
output <- matrix(nrow = 18, ncol = 4, NA)
colnames(output) <- c('sum','mean', 'median','sd')
rownames(output) <-
as.character(unique(df$Transposon_Super_Family))
output
j <- 1
for (i in rownames(output)){
temp <- df[(df$Transposon_Super_Family == i),]
output[j,1] <- sum(temp$te_size)
output[j,2] <- mean(temp$te_size)
output[j,3] <- median(temp$te_size)
output[j,4] <- sd(temp$te_size)
j <- j + 1
}
output
sum(df$te_size[grep('LTR/Gypsy ',df$Transposon_Super_Family),])
sum(df$te_size[grep('LTR/Gypsy ',df$Transposon_Super_Family)])
sum(df$te_size[grep('LTR/Gypsy',df$Transposon_Super_Family)])
sd(df$te_size[grep('LTR/Gypsy',df$Transposon_Super_Family)])
output
output$Percentage <- output[,1]/ 120654532
output
output <- matrix(nrow = 18, ncol = 4, NA)
colnames(output) <- c('sum','mean', 'median','sd')
rownames(output) <-
as.character(unique(df$Transposon_Super_Family))
j <- 1
for (i in rownames(output)){
temp <- df[(df$Transposon_Super_Family == i),]
output[j,1] <- sum(temp$te_size)
output[j,2] <- mean(temp$te_size)
output[j,3] <- median(temp$te_size)
output[j,4] <- sd(temp$te_size)
j <- j + 1
}
output
output <- as.data.frame(output)
output$Percentage <- output$sum/ 120654532
output
head(df)
Summary_TSF <- function(data) {
nrow <- length(unique(data$Transposon_Super_Family))
output <- matrix(nrow = nrow, ncol = 4, NA)
colnames(output) <- c('sum','mean', 'median','sd')
rownames(output) <-
as.character(unique(data$Transposon_Super_Family))
j <- 1
for (i in rownames(output)){
temp <- data[(data$Transposon_Super_Family == i),]
output[j,1] <- sum(temp$te_size)
output[j,2] <- mean(temp$te_size)
output[j,3] <- median(temp$te_size)
output[j,4] <- sd(temp$te_size)
j <- j + 1
return(output)
}
}
tout <- Summary_TSF(df)
tout
Summary_TSF <- function(data) {
nrow <- length(unique(data$Transposon_Super_Family))
output <- matrix(nrow = nrow, ncol = 4, NA)
colnames(output) <- c('sum','mean', 'median','sd')
rownames(output) <-
as.character(unique(data$Transposon_Super_Family))
j <- 1
for (i in rownames(output)){
temp <- data[(data$Transposon_Super_Family == i),]
output[j,1] <- sum(temp$te_size)
output[j,2] <- mean(temp$te_size)
output[j,3] <- median(temp$te_size)
output[j,4] <- sd(temp$te_size)
j <- j + 1
}
return(output)
}
tout <- Summary_TSF(df)
tout
output2
output2 <- Summary_TSF(df)
output2
head(df)
output2
head(df)
Summary_TSF <- function(data, statistic) {
nrow <- length(unique(data$Transposon_Super_Family))
rownames(output) <-
as.character(unique(data$Transposon_Super_Family))
if (statistic == 'summary'){
output <- matrix(nrow = nrow, ncol = 4, NA)
colnames(output) <- c('sum','mean', 'median','sd')
j <- 1
for (i in rownames(output)){
temp <- data[(data$Transposon_Super_Family == i),]
output[j,1] <- sum(temp$te_size)
output[j,2] <- mean(temp$te_size)
output[j,3] <- median(temp$te_size)
output[j,4] <- sd(temp$te_size)
j <- j + 1
} } else if (statistic == 'percentage') {
output <- matrix(nrow = nrow, ncol = 1, NA)
colnames(output) <- c('percentage')
j <- 1
for (i in rownames(output)){
temp <- data[(data$Transposon_Super_Family == i),]
output[j,1] <- sum(temp$te_size) / 120654532
j <- j + 1
}
}
return(output)
}
output2 <- Summary_TSF(data = df, statistic = 'summary')
output2
TSF_func <- function(data, statistic) {
nrow <- length(unique(data$Transposon_Super_Family))
rownames(output) <-
as.character(unique(data$Transposon_Super_Family))
if (statistic == 'summary'){
output <- matrix(nrow = nrow, ncol = 4, NA)
colnames(output) <- c('sum','mean', 'median','sd')
j <- 1
for (i in rownames(output)){
temp <- data[(data$Transposon_Super_Family == i),]
output[j,1] <- sum(temp$te_size)
output[j,2] <- mean(temp$te_size)
output[j,3] <- median(temp$te_size)
output[j,4] <- sd(temp$te_size)
j <- j + 1
}
} else if (statistic == 'percentage') {
output <- matrix(nrow = nrow, ncol = 1, NA)
colnames(output) <- c('percentage')
j <- 1
for (i in rownames(output)){
temp <- data[(data$Transposon_Super_Family == i),]
output[j,1] <- sum(temp$te_size) / 120654532
j <- j + 1
}
}
return(output)
}
output2 <- TSF_func(data = df, statistic = 'summary')
output2
head(df)
TSF_func <- function(data, statistic) {
nrow <- length(unique(data$Transposon_Super_Family))
rownames(output) <-
as.character(unique(data$Transposon_Super_Family))
if (statistic == 'summary'){
output <- matrix(nrow = nrow, ncol = 4, NA)
colnames(output) <- c('sum','mean', 'median','sd')
j <- 1
for (i in rownames(output)){
temp <- data[(data$Transposon_Super_Family == i),]
output[j,1] <- sum(temp$te_size)
output[j,2] <- mean(temp$te_size)
output[j,3] <- median(temp$te_size)
output[j,4] <- sd(temp$te_size)
j <- j + 1
} return(output)
output2 <- TSF_func(data = df, statistic = 'summary')
output2
output2 <- TSF_func(data = df, statistic = 'percentage')
output2
TSF_func <- function(data, statistic) {
nrow <- length(unique(data$Transposon_Super_Family))
if (statistic == 'summary'){
output <- matrix(nrow = nrow, ncol = 4, NA)
rownames(output) <-
as.character(unique(data$Transposon_Super_Family))
colnames(output) <- c('sum','mean', 'median','sd')
j <- 1
for (i in rownames(output)){
temp <- data[(data$Transposon_Super_Family == i),]
output[j,1] <- sum(temp$te_size)
output[j,2] <- mean(temp$te_size)
output[j,3] <- median(temp$te_size)
output[j,4] <- sd(temp$te_size)
j <- j + 1
} return(output)
TSF_func <- function(data, statistic) {
nrow <- length(unique(data$Transposon_Super_Family))
if (statistic == 'summary'){
output <- matrix(nrow = nrow, ncol = 4, NA)
rownames(output) <-
as.character(unique(data$Transposon_Super_Family))
colnames(output) <- c('sum','mean', 'median','sd')
j <- 1
for (i in rownames(output)){
temp <- data[(data$Transposon_Super_Family == i),]
output[j,1] <- sum(temp$te_size)
output[j,2] <- mean(temp$te_size)
output[j,3] <- median(temp$te_size)
output[j,4] <- sd(temp$te_size)
j <- j + 1
}
return(output)
} else if (statistic == 'percentage') {
output <- matrix(nrow = nrow, ncol = 1, NA)
colnames(output) <- c('percentage')
rownames(output) <-
as.character(unique(data$Transposon_Super_Family))
j <- 1
for (i in rownames(output)){
temp <- data[(data$Transposon_Super_Family == i),]
output[j,1] <- sum(temp$te_size) / 120654532
j <- j + 1
}
return(output)
}
}
output2 <- TSF_func(data = df, statistic = 'percentage')
output2
TSF_func <- function(data, statistic) {
nrow <- length(unique(data$Transposon_Super_Family))
if (statistic == 'summary'){
output <- matrix(nrow = nrow, ncol = 4, NA)
rownames(output) <-
as.character(unique(data$Transposon_Super_Family))
colnames(output) <- c('sum','mean', 'median','sd')
j <- 1
for (i in rownames(output)){
temp <- data[(data$Transposon_Super_Family == i),]
output[j,1] <- sum(temp$te_size)
output[j,2] <- mean(temp$te_size)
output[j,3] <- median(temp$te_size)
output[j,4] <- sd(temp$te_size)
j <- j + 1
}
return(output)
} else if (statistic == 'percentage') {
output <- matrix(nrow = nrow, ncol = 1, NA)
colnames(output) <- c('percentage')
rownames(output) <-
as.character(unique(data$Transposon_Super_Family))
j <- 1
for (i in rownames(output)){
temp <- data[(data$Transposon_Super_Family == i),]
output[j,1] <- sum(temp$te_size) / 120654532
j <- j + 1
}
return(output)
}
}
print(summary_output<- TSF_func(data = df, statistic = 'summary'))
print(percentage_output <- TSF_func(data = df, statistic = 'percentage'))
TSF_func <- function(data, statistic) {
nrow <- length(unique(data$Transposon_Super_Family))
if (statistic == 'summary'){
output <- matrix(nrow = nrow, ncol = 4, NA)
rownames(output) <-
as.character(unique(data$Transposon_Super_Family))
colnames(output) <- c('sum','mean', 'median','sd')
j <- 1
for (i in rownames(output)){
temp <- data[(data$Transposon_Super_Family == i),]
output[j,1] <- sum(temp$te_size)
output[j,2] <- mean(temp$te_size)
output[j,3] <- median(temp$te_size)
output[j,4] <- sd(temp$te_size)
j <- j + 1
}
} else if (statistic == 'percentage') {
output <- matrix(nrow = nrow, ncol = 1, NA)
colnames(output) <- c('percentage')
rownames(output) <-
as.character(unique(data$Transposon_Super_Family))
j <- 1
for (i in rownames(output)){
temp <- data[(data$Transposon_Super_Family == i),]
output[j,1] <- sum(temp$te_size) / 120654532
j <- j + 1
}
}
return(output)
}
print(summary_output<- TSF_func(data = df, statistic = 'summary'))
print(percentage_output <- TSF_func(data = df, statistic = 'percentage'))
TSF_func <- function(data, statistic) {
nrow <- length(unique(data$Transposon_Super_Family))
if (statistic == 'summary'){
output <- matrix(nrow = nrow, ncol = 4, NA)
rownames(output) <-
as.character(unique(data$Transposon_Super_Family))
colnames(output) <- c('sum','mean', 'median','sd')
j <- 1
for (i in rownames(output)){
temp <- data[(data$Transposon_Super_Family == i),]
output[j,1] <- sum(temp$te_size)
output[j,2] <- mean(temp$te_size)
output[j,3] <- median(temp$te_size)
output[j,4] <- sd(temp$te_size)
j <- j + 1
}
} else if (statistic == 'percentage') {
output <- matrix(nrow = nrow, ncol = 1, NA)
colnames(output) <- c('percentage')
rownames(output) <-
as.character(unique(data$Transposon_Super_Family))
j <- 1
for (i in rownames(output)){
temp <- data[(data$Transposon_Super_Family == i),]
output[j,1] <- sum(temp$te_size) / 120654532
j <- j + 1
}
}
return(output)
}
print(summary_output<- TSF_func(data = df, statistic = 'summary'))
print(percentage_output <- TSF_func(data = df, statistic = 'percentage'))
